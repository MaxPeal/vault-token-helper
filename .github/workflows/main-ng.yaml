
name: main-ng
on: [push, pull_request]

jobs:
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && !contains(toJson(github.event.commits), '[ci skip]') && !contains(toJson(github.event.commits), '[skip ci]')
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-go@v2
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v3.0.0
        with:
          install-only: true

      - name: install golangci-lint
        run: |
          mkdir -p "$HOME/bin"
          curl -sfL https://raw.githubusercontent.com/golangci/golangci-lint/9d9855c149a3d46410f0bf818ead38c9f445bbf1/install.sh | sh -s -- -b "$HOME/bin" v1.46.2
          echo "$HOME/bin" >> $GITHUB_PATH
        shell: bash # force windows to use git-bash for access to curl

      - name: make lint
        env:
          CI: "true"
        run: make lint
        shell: bash

  test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && !contains(toJson(github.event.commits), '[ci skip]') && !contains(toJson(github.event.commits), '[skip ci]')
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-go@v2
      - uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: install go deps
        run: make deps

      - name: install pass (linux)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get -qy update
          sudo apt-get -qy install pass
      - name: install pass (macos)
        if: startsWith(runner.os, 'macOS')
        run: |
          brew install pass
      - name: make test
        env:
          CI: "true"
        run: make test

  release-test:
    needs: [lint, test]
    # don't waste time running a goreleaser test build on main since we will run a full release:
    if: github.ref != 'refs/heads/main'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: go mod cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Homebrew musl-cross cache
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/Homebrew/musl-cross--*
            ~/Library/Caches/Homebrew/downloads/*--musl-cross-*
          key: brew-musl-cross-${{ hashFiles('~/Library/Caches/Homebrew/downloads/*--musl-cross-*') }}
          restore-keys: brew-musl-cross-

      - uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CODESIGN_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.APPLE_CODESIGN_CERTIFICATES_PASSWORD }}

      - name: import GPG signing key
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
        run: |
          echo "$GPG_KEY" \
            | base64 --decode \
            | gpg --batch --allow-secret-key-import --import
          gpg --keyid-format LONG --list-secret-keys
      
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v3.0.0
        with:
          install-only: true
      
      - name: install release deps
        run: |
          # install goreleaser binary directly, don't use brew because brew will bring in its own
          # version of go which will cause issues with the version installed by the 'setup-go' action:
          #curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | bash -s -- -b /usr/local/bin
          #curl -sfL https://github.com/goreleaser/goreleaser/releases/download/v0.183.0/goreleaser_Darwin_all.tar.gz | tar -xvzf - goreleaser
          #mv goreleaser /usr/local/bin
          brew install FiloSottile/musl-cross/musl-cross
      - run: make snapshot

  release:
    needs: [lint, test]
    # only create a release on main builds:
    if: github.ref == 'refs/heads/main'
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3.0.2
      - uses: actions/setup-go@v2
        with:
          go-version: 1.17.x

      - name: go mod cache
        uses: actions/cache@v1
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Homebrew musl-cross cache
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/Homebrew/musl-cross--*
            ~/Library/Caches/Homebrew/downloads/*--musl-cross-*
          key: brew-musl-cross-${{ hashFiles('~/Library/Caches/Homebrew/downloads/*--musl-cross-*') }}
          restore-keys: brew-musl-cross-

      - uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CODESIGN_CERTIFICATES_P12 }}
          p12-password: ${{ secrets.APPLE_CODESIGN_CERTIFICATES_PASSWORD }}

      - name: import GPG signing key
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}
        run: |
          echo "$GPG_KEY" \
            | base64 --decode \
            | gpg --batch --allow-secret-key-import --import
          gpg --keyid-format LONG --list-secret-keys
      - name: Unshallow
        run: |
          # fetch all tags and history so that goreleaser can generate a proper changelog
          # and autotag can calculate the next version tag:
          git fetch --tags --unshallow --prune
          if [ $(git rev-parse --abbrev-ref HEAD) != "main" ]; then
            # ensure a local 'main' branch exists for autotag to work correctly:
            git branch --track main origin/main
          fi
          
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v3.0.0
        with:
          install-only: true

      - name: install release deps
        run: |
          # install goreleaser binary directly, don't use brew because brew will bring in its own
          # version of go which will cause issues with the version installed by the 'setup-go' action:
          #curl -sfL https://install.goreleaser.com/github.com/goreleaser/goreleaser.sh | bash -s -- -b /usr/local/bin
          ###curl -sfL https://github.com/goreleaser/goreleaser/releases/download/v0.183.0/goreleaser_Darwin_all.tar.gz | tar -xvzf - goreleaser
          ###mv goreleaser /usr/local/bin
          brew install FiloSottile/musl-cross/musl-cross
      - name: run autotag to increment version
        run: |
          curl -sL https://git.io/autotag-install | sudo sh -s -- -b /usr/local/bin
          autotag
      - name: build and push release artifacts
        env:
          GITHUB_TOKEN: ${{ secrets.BREW_GITHUB_TOKEN }}
        run: |
          make deps
          make release
